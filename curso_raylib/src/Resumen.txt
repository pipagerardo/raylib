----------------------------------------------------------------------------
Curso de C con Raylib - Compilar Raylib 4.0.0 en Windows usando Code::Blocks
----------------------------------------------------------------------------

CODE::BLOCKS
https://www.codeblocks.org/
https://sourceforge.net/projects/codeblocks/
https://sourceforge.net/projects/codeblocks/files/Binaries/20.03/Windows/codeblocks-20.03mingw-nosetup.zip/download

RAYLIB
https://www.raylib.com/games.html
https://github.com/raysan5/raylib/releases

CREAR UN ACHIVO COMPILAR.BAT
----------------------------
PATH=%PATH%;C:\RAYIB\codeblocks\MinGW\bin;
mingw32-make.exe all PLATAFORM=PLATAFORM_DESKTOP
PAUSE

--------------------------------------------------------
Curso de C con Raylib - Lección 000 - Ventana con Iconos
--------------------------------------------------------

GIMP EDITOR DE FOTOS
https://www.gimp.org/

#include "raylib.h" 		// Incluir librería Raylib
#include "raylib_32x32.c"   	// Incluir una archivo de código, en este caso el Icono de la Ventana
#define WIN_ANCHO   900         // Crear una constante definida en el prepocesador
int main( void ) {		// La función principal
	return 0;
}

void InitWindow(int width, int height, const char *title);	// Iniciar una ventana con Raylib

void SetWindowState(unsigned int flags);
	FLAG_VSYNC_HINT         // Activar el Sincronismo Vertical de la GPU (V-Sync on GPU)
	FLAG_FULLSCREEN_MODE    // Pone la Ventana en Pantalla Completa
	FLAG_WINDOW_RESIZABLE   // Hace que la Ventana sea Redimensionable.
	FLAG_WINDOW_HIDDEN      // Set to hide window
	FLAG_WINDOW_MINIMIZED   // Set to minimize window (iconify)
	FLAG_WINDOW_MAXIMIZED   // Set to maximize window (expanded to monitor)

void SetTargetFPS(int fps);		// Selecciona los fotogramas por segundo

void SetWindowIcon(Image image);	// Pone un icono a la ventana

void BeginDrawing(void);             	// Empieza a dibujar.

void ClearBackground(Color color);   	// Borra toda la ventana de un color.

void EndDrawing(void);               	// Termina de dibujar.

void CloseWindow();              	// Cerramos la ventana y el contexto OpenGL

void DrawText(const char *text, int posX, int posY, int fontSize, Color color);  // Dibuja texto usando la fuente por defecto

const char *TextFormat(const char *text, ...); 		// Función para Formatear Texto:

---------------------------------------------------------
Curso de C con Raylib - Lección 001 - Tipos Básicos de C
---------------------------------------------------------

// ENTEROS SIN SIGNO:
// ------------------
unsigned char            ->  unsigned char       -> sizeof( unsigned char )      -> 5U;   -> %hhu | %hhc | %c
unsigned short int       ->  unsigned short      -> sizeof( unsigned short )     -> 5U;   -> %hu  | %hc  | %C
unsigned int             ->  unsigned            -> sizeof( unsigned )           -> 5U;   -> %u
unsigned long int        ->  unsigned long       -> sizeof( unsigned long )      -> 5UL;  -> %lu
unsigned long long int   ->  unsigned long long  -> sizeof( unsigned long long ) -> 5ULL; -> %llu

// ENTEROS CON SIGNO:
// ------------------
signed  char             ->  char        -> sizeof( char )       -> 5;   -> %hhd | %hhi | %hhc | %c
signed  short int        ->  short       -> sizeof( short )      -> 5;   -> %hd  | %hi  | %hc  | %C
signed  int              ->  int         -> sizeof( int )        -> 5;   -> %d   | %i
signed  long int         ->  long        -> sizeof( long )       -> 5L;  -> %ld  | %li
signed  long long int    ->  long long	-> sizeof( long long )  -> 5LL; -> %lld | %lli

// ENTEROS DE TIPO EXACTO:
// -----------------------
#include <stdint.h>
typedef signed   char        int8_t;    // 1 Byte  |  8 bits
typedef unsigned char        uint8_t;	// 1 Byte  |  8 bits
typedef short                int16_t;	// 2 Bytes | 16 bits
typedef unsigned short       uint16_t;	// 2 Bytes | 16 bits
typedef int                  int32_t;	// 4 Bytes | 32 bits
typedef unsigned             uint32_t;	// 4 Bytes | 32 bits
typedef long long            int64_t;	// 8 Bytes | 64 bits
typedef unsigned long long   uint64_t;	// 8 Bytes | 64 bits

// ENTEROS EN BINARIO, HEXADECIMA Y OCTAL:
// ---------------------------------------
// Binario: 0b00000000; 0B11111111; -> %No hay nada para sacar en binario
char a = 0b00000000; // Binario digitos { 0, 1 }
char b = 0B11111111;
// Hexadecimal: 0xFF; 0x5bac; -> %x | %X
unsigned c = 0x0a;  // Hexadecimal digitos { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
unsigned d = 0xFF;  // Hexadecimal letras  { A, B, C, D, E, F }
// Octal: 07;  -057;  03456;  -> %o
int e = 07;	// OJO! si empieza por cero es base Octal.
int f = 027;	// OJO! digitos { 0, 1, 2, 3, 4, 5, 6, 7 }
int g = -027;   // No es -27 pues no es base decimal, es

// REALES FLOTANTES:
// -----------------
#include <float.h>
float        -> sizeof( float )          -> 5.5F;    -> %f   | %e  | %E
double       -> sizeof( double )         -> 5.5D;    -> %f   | %e  | %E
long double  -> sizeof( long double )    -> 5.5L;    -> %lf  | %le | %LE

Precisión en dígitos:
	FLT_DIG		DBL_DIG		LDBL_DIG

Máximos y mínimos:
	FLT_MAX		FLT_MIN
	DBL_MAX		DBL_MIN
	LDBL_MAX	LDBL_MIN

// Función para Formatear Texto:
// -----------------------------
const char *TextFormat(const char *text, ...);

	unsigned char           -> %hhu | %hhc | %c
	signed  char            -> %hhd | %hhi | %hhc | %c
	unsigned short int      -> %hu  | %hc  | %C
	signed  short int       -> %hd  | %hi  | %hc  | %C
	unsigned int            -> %u
	signed  int             -> %d   | %i
	unsigned long int       -> %lu
	signed  long int        -> %ld  | %li
	unsigned long long int  -> %llu
	signed  long long int   -> %lld | %lli
	float        		-> %f   | %e  | %E
	double       		-> %f   | %e  | %E
	long double  		-> %lf  | %le | %LE

---------------------------------------------------------------------------------------------------------
const char *TextFormat(const char *text, ...);
%[flags][width][.precision][length]specifier
---------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------
| specifier	                            Output					|  Example      |
---------------------------------------------------------------------------------------------------------
| d or i | Signed decimal integer							| 392 		|
| u	 | Unsigned decimal integer							| 7235 		|
| o	 | Unsigned octal								| 610 		|
| x	 | Unsigned hexadecimal integer							| 7fa 		|
| X	 | Unsigned hexadecimal integer (uppercase)					| 7FA 		|
| f	 | Decimal floating point, lowercase						| 392.65 	|
| F	 | Decimal floating point, uppercase						| 392.65 	|
| e	 | Scientific notation (mantissa/exponent), lowercase				| 3.9265e+2 	|
| E	 | Scientific notation (mantissa/exponent), uppercase				| 3.9265E+2 	|
| g	 | Use the shortest representation: %e or %f					| 392.65 	|
| G	 | Use the shortest representation: %E or %F					| 392.65	|
| a	 | Hexadecimal floating point, lowercase					| -0xc.90fep-2	|
| A	 | Hexadecimal floating point, uppercase					| -0XC.90FEP-2	|
| c	 | Character									| a 		|
| s	 | String of characters								| sample 	|
| p	 | Pointer address								| b8000000 	|
| n	 | Nothing printed.								|		|
| 	 | The corresponding argument must be a pointer to a signed int.		| 		|
| 	 | The number of characters written so far is stored in the pointed location. 	| 		|	
| %	 | A % followed by another % character will write a single % to the stream.	| %		|
---------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------
| flags   | description
-----------------------------------------------------------------------------------------------------------
| -	  | Left-justify within the given field width; Right justification is the default (see width sub-specifier).
| +	  | Forces to preceed the result with a plus or minus sign (+ or -) even for positive numbers.
|         | By default, only negative numbers are preceded with a - sign.
| (space) | If no sign is going to be written, a blank space is inserted before the value.
| #	  | Used with o, x or X specifiers the value is preceeded with 0, 0x or 0X respectively for values different than zero.
|         | Used with a, A, e, E, f, F, g or G it forces the written output to contain a decimal point even if no more digits follow. 
|         | By default, if no digits follow, no decimal point is written.
| 0	  | Left-pads the number with zeroes (0) instead of spaces when padding is specified (see width sub-specifier).
-----------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------
| width	   | description
-----------------------------------------------------------------------------------------------------------
| (number) | Minimum number of characters to be printed. 
|          | If the value to be printed is shorter than this number, the result is padded with blank spaces.
|          | The value is not truncated even if the result is larger.
| *	   | The width is not specified in the format string, but as an additional integer value argument preceding the argument that has to be formatted.
-----------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------
| .precision	description
---------------------------------------------------------------------------------------------------------------------
| .number | For integer specifiers (d, i, o, u, x, X): precision specifies the minimum number of digits to be written. 
|	  | If the value to be written is shorter than this number, the result is padded with leading zeros.
|	  | The value is not truncated even if the result is longer. A precision of 0 means that no character is written for the value 0.
| 	  | For a, A, e, E, f and F specifiers: this is the number of digits to be printed after the decimal point (by default, this is 6).
| 	  | For g and G specifiers: This is the maximum number of significant digits to be printed.
| 	  | For s: this is the maximum number of characters to be printed. By default all characters are printed until the ending null character is encountered.
| 	  | If the period is specified without an explicit value for precision, 0 is assumed.
| .*	  | The precision is not specified in the format string, but as an additional integer value argument preceding the argument that has to be formatted.
------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------
|specifiers
------------------------------------------------------------------------------------------------------------------
| length |	d i	 |          u o x X	  | f F e E g G a A |	 c   |	   s    |  p    |	n        |
------------------------------------------------------------------------------------------------------------------
| (none) | int		 | unsigned int		  | double	    | int    | char*    | void* | int*		 |
| hh	 | signed char	 | unsigned char	  |		    |	     | 	        |       | signed char*	 |
| h	 | short int	 | unsigned short int	  |		    |	     |          |       | short int*	 |
| l	 | long int	 | unsigned long int	  |		    | wint_t | wchar_t* |       | long int*	 |
| ll	 | long long int | unsigned long long int |		    |	     |		|	| long long int* |
| j	 | intmax_t	 | uintmax_t		  |	  	    |	     |		|	| intmax_t*	 |
| z	 | size_t	 | size_t		  |		    |	     |		|	| size_t*	 |
| t	 | ptrdiff_t	 | ptrdiff_t		  |		    |	     |		|	| ptrdiff_t*	 |
| L	 |		 |			  | long double     |	     |		|	| 		 |		
------------------------------------------------------------------------------------------------------------------

------------------------------------------------------
Curso de C con Raylib - Lección 002 - Cadenas de Texto
------------------------------------------------------


